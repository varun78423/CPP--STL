#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int NcR(int n,int r){
	if(r > n) return 0;	
	int res=1;
	for(int i=0 ; i<r ; i++){
		res*=(n-i);
		res/=(i+1);
	}
	return res;
}
int main(){
	vector<int> A;
	A.push_back(10);
	A.emplace_back(20);
	A.push_back(30);
	A.push_back(50);
	auto it = A.begin()+3;

	A.insert(it,40); // how to insert
	for(auto i:A) cout<<i<<" ";
	cout<<endl;

	// how to delete
	//A.pop_back();
	//A.clear();
	it=A.begin();
	A.erase(it);  
	for(auto i:A) cout<<i<<" ";
	cout<<endl;
	
	auto y = find(A.begin(),A.end(),20); // tells address
	int ind=y - A.begin(); // tells index
	if(y != A.end()){
		cout<<*y<<" ";
		cout<<ind<<endl;
	}

	auto z=binary_search(A.begin(),A.end(),30);
	cout<<z<<endl; // gives true or false and only on sorted vector
	// lower and upper bond works on sorted vector
	// lowest occurence and highest occurence of a element
	vector<int> B={10,10,20,20,30};// should be sorted
	//vector<int> B(10,20,10,20,30);
	auto lb=lower_bound(B.begin(),B.end(),20);
	auto ub=upper_bound(B.begin(),B.end(),20);
	cout<<lb-B.begin() <<" "<< ub-B.begin() <<endl;


	// int n,r;
	// int ans=NcR(n,r);

	list<int>lis;
	lis.push_back(10);
	lis.push_back(20);
	lis.push_front(1);
	lis.push_back(50);//[1,10,20,50]
	//auto x=lis.begin()+3; // as linked list is not in contiguous memory
	auto x=lis.begin();
	x++;
	lis.insert(x,2);
	// list<int>:: iterator it; // to traverse list in loop use like this
	// for(it=lis.begin() ; it!=lis.end() ; ++it){
	// 	cout<<*it<<" ";
	// }
	auto y1=lis.begin();
	y1++; // erases 2nd element
	lis.erase(y1);
	for(auto it:lis) cout<<it<<" ";
	// list and vec diff in insertion deletion pushfront.....
	cout<<endl;

	//key(sorted) -- value
	// unordered map(keys are not sorted)
	// in multi map many same keys are used
	multimap<char,string> mpp;
	for(int i=0 ; i<4; i++){
		char a;
		string b;
		cin>>a>>b;
		mpp.insert(make_pair(a,b));
	}
	// if(mpp.find(key) != mpp.end()){  to find

	// }
	//in map --> no begin and end , no push or pop back
	 auto ind1=mpp.find('a');  
	  if(ind1 != mpp.end()){
		mpp.erase(ind1);
	  }
	 for(auto it:mpp){
		cout<<it.first<<" "<<it.second<<endl;
	}
	//[ set,map ]
}
